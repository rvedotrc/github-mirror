commit 4a8097c61e6d6a8d2d451e47cc689eafd4a8a598
Author: Rachel Evans <git@rve.org.uk>
Date:   Tue Aug 30 09:59:19 2016 +0100

    v0.1.5

diff --git a/rosarium.gemspec b/rosarium.gemspec
index 9704aa6..1b02f2f 100644
--- a/rosarium.gemspec
+++ b/rosarium.gemspec
@@ -2,7 +2,7 @@
 
 Gem::Specification.new do |s|
   s.name        = 'rosarium'
-  s.version     = '0.1.4'
+  s.version     = '0.1.5'
   s.summary     = 'Promises, or something like them'
   s.description = <<-EOF
     Rosarium implements something that's a bit like Promises,

commit e44b6a0c60730c623789c043f6ad0de2590cde1b
Author: Rachel Evans <git@rve.org.uk>
Date:   Tue Aug 30 09:57:29 2016 +0100

    Simplify implementation of "execute"
    
    Technically it's slightly different: before, the "execute" block would be
    called with no arguments, and now it's called with one (the value of which is
    undocumented, but happens to be nil).

diff --git a/lib/rosarium/promise.rb b/lib/rosarium/promise.rb
index 554919c..16062eb 100644
--- a/lib/rosarium/promise.rb
+++ b/lib/rosarium/promise.rb
@@ -21,17 +21,9 @@ module Rosarium
       deferred.promise
     end
 
+    @@resolved = resolve(nil)
     def self.execute(&block)
-      deferred = defer
-      EXECUTOR.submit do
-        begin
-          # User-supplied code
-          deferred.resolve block.call
-        rescue Exception => e
-          deferred.reject e
-        end
-      end
-      deferred.promise
+      @@resolved.then { block.call }
     end
 
     def self.all_settled(promises)

commit cf972b239644a98598f588a8756f9d76d8f19441
Author: Rachel Evans <git@rve.org.uk>
Date:   Tue Aug 30 09:55:04 2016 +0100

    Bug fix: never call user-supplied code on the main thread

diff --git a/lib/rosarium/promise.rb b/lib/rosarium/promise.rb
index bc3a51d..554919c 100644
--- a/lib/rosarium/promise.rb
+++ b/lib/rosarium/promise.rb
@@ -88,18 +88,20 @@ module Rosarium
       on_rejected ||= DEFAULT_ON_REJECT
 
       on_resolution do
-        begin
-          deferred.resolve(
-            if fulfilled?
-              # User-supplied code
-              on_fulfilled.call value
-            else
-              # User-supplied code
-              on_rejected.call reason
-            end
-          )
-        rescue Exception => e
-          deferred.reject e
+        EXECUTOR.submit do
+          begin
+            deferred.resolve(
+              if fulfilled?
+                # User-supplied code
+                on_fulfilled.call value
+              else
+                # User-supplied code
+                on_rejected.call reason
+              end
+            )
+          rescue Exception => e
+            deferred.reject e
+          end
         end
       end
 
diff --git a/spec/promise_methods_spec.rb b/spec/promise_methods_spec.rb
index 5f9e691..5fb389b 100644
--- a/spec/promise_methods_spec.rb
+++ b/spec/promise_methods_spec.rb
@@ -68,4 +68,11 @@ describe Rosarium::Promise do
     end
   end
 
+  it "uses the executor even if immediately callable" do
+    deferred = Rosarium::Promise.resolve(nil).then { sleep 0.1; 7 }
+    check_pending deferred
+    sleep 0.2
+    check_fulfilled deferred, 7
+  end
+
 end
