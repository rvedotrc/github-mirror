#!/usr/bin/env ruby
# vi: set ts=2 sw=2 :

$: << "lib"

require 'github_api'
require 'github_mirror/cacheing_thing'
require 'github_mirror/github_paginating_enumerator'
require 'github_mirror/repository_processor'
require 'json'
require 'rosarium'
require 'rosarium/promise_concurrency_limiter'

begin
  stdout_mutex = Mutex.new

  define_method(:puts) do |*args|
    stdout_mutex.synchronize do
      super *args
    end
  end
end

config = JSON.parse(IO.read 'etc/github-mirror.json')
user = config['github']['user']
pass = config['github']['pass']

github_client = Github.new(
  basic_auth: user+':'+pass,
  auto_pagination: false,
)

promises = []
limiter = Rosarium::PromiseConcurrencyLimiter.new(8)
FileUtils.rm_f 'var/stop'

GithubMirror::CacheingThing.new('var/repositories.json', Time.now - 86400) do
  github_client.repos.list.lazy_each
end.each do |repo|
  next unless config['github']['allow_orgs'].include? repo['owner']['login']

  promises << limiter.promise do
    Rosarium::Promise.execute do
      next :cancelled if File.exists? 'var/stop'
      puts repo['full_name']
      GithubMirror::RepositoryProcessor.new.process_repo repo
    end
  end
end

Rosarium::Promise.all_settled(promises).value!
Rosarium::Promise.all(promises).value!

# eof try
