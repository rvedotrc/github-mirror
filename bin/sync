#!/usr/bin/env ruby

$: << "lib"
require 'rosarium'
require 'github_mirror'

def list_repositories
  Rosarium::Promise.execute do
    lister = GithubMirror::ListRepositories.new

    listing = lister.load_if_fresh(3600)

    if !listing
      listing = lister.list
      lister.save listing
    end

    listing
  end
end

def clone_repositories(listing)
  puts "listing=#{listing.inspect}"
  cloner = GithubMirror::CloneMissing.new(dry_run: false)

  promises = []
  cloner.run(listing) do |url, pushed_at|
    promises << Rosarium::Promise.execute do
      cloner.run_one(url, pushed_at)
      nil
    end
  end

  Rosarium::Promise.all(promises)
end

def clone_repository(cloner, url, pushed_at)
  puts "Should update #{pushed_at} #{url}"
end

def scan_commits
  scanner = GithubMirror::ScanCommits.new
  Rosarium::Promise.all(
    scanner.list_jobs.map do |changed_file|
      Rosarium::Promise.execute { scanner.scan_one changed_file }
    end
  )
end

v = list_repositories
  .then {|listing| clone_repositories listing}
  .then { scan_commits }
  .value!

puts "Promise returned #{v.inspect}"

# eof sync
