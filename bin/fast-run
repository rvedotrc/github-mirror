#!/usr/bin/env ruby

$: << "lib"
require 'rosarium'
require 'github_mirror'
require 'json'

@config = JSON.parse(IO.read "etc/github-mirror.json")

def do_page(page)
  # puts "page=#{page.inspect[0..100]}"
  Rosarium::Promise.all(page.map {|repo| do_repo repo})
end

def do_repo(repo)
  Rosarium::Promise.execute do
    # puts "repo=#{repo.inspect}"
    url = repo["git_url"]
    pushed_at = repo["pushed_at"]
    org = url.split('/')[3]

    unless @config["github"]["allow_orgs"].nil? or @config["github"]["allow_orgs"].include? org
      # ignored_orgs << org
      nil
    else
      local_dir = url.gsub("git://github.com/", "var/github/").gsub(/\.git$/, "")
      cloner = GithubMirror::CloneOne.new(local_dir, false)
      if cloner.run(url, pushed_at)
        puts "repo #{url} has new commits"
        # TODO scan all commits not already scanned

      end
    end
  end
end

github_client = GithubMirror::GithubClient.get("etc/github-mirror.json")
json_cache = GithubMirror::JSONCache.new("var/list-repos.json", 3600*10)
lister = GithubMirror::RepositoryLister.new(github_client, json_cache)
# The iterator pattern doesn't play at all well with promises ("FiberError:
# fiber called across threads"), so use the block pattern instead.
Rosarium::Promise.all(lister.each_page.map {|page| do_page page}).value!

# eof fast-run
