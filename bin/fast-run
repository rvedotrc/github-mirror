#!/usr/bin/env ruby

$: << "lib"
require 'rosarium'
require 'github_mirror'
require 'json'

@config = JSON.parse(IO.read "etc/github-mirror.json")

def do_page(page)
  # puts "page=#{page.inspect[0..100]}"
  Rosarium::Promise.all(page.map {|repo| do_repo repo})
end

def repo_allowed?(repo, org)
  @config["github"]["allow_orgs"].nil? or @config["github"]["allow_orgs"].include? org
end

def do_repo(repo)
  # puts "repo=#{repo.inspect}"
  url = repo["git_url"]
  pushed_at = repo["pushed_at"]
  org = url.split('/')[3]

  unless repo_allowed?(repo, org)
    return Rosarium::Promise.resolve(
      repo.merge(allowed: false)
    )
  end

  local_dir = url.gsub("git://github.com/", "var/github/").gsub(/\.git$/, "")

  cloner = Rosarium::Promise.execute do
    cloner = GithubMirror::RepositoryCloner.new(local_dir, false)
    cloner.run(url, pushed_at)
  end

  aws = cloner.then do
    GithubMirror::AwsCredentialsCommitScanner.new(local_dir).run
  end.then do |state|
    { log: state["log"] }
  end.catch do |e|
    puts "FAILED to update #{local_dir} for AwsCredentialsCommitScanner: #{e}"
    { error: e }
  end

  sweary = cloner.then do
    GithubMirror::SwearyCommitScanner.new(local_dir).run
  end.then do |state|
    { log: state["log"] }
  end.catch do |e|
    puts "FAILED to update #{local_dir} for SwearyCommitScanner: #{e}"
    { error: e }
  end

  Rosarium::Promise.all([aws, sweary]) do |r_aws, r_sweary|
    repo.merge(
      aws_credentials_commits: r_aws,
      sweary_commits: r_sweary,
    )
  end
end

github_client = GithubMirror::GithubClient.get("etc/github-mirror.json")
json_cache = GithubMirror::JSONCache.new("var/list-repos.json", 3600*10)
lister = GithubMirror::RepositoryLister.new(github_client, json_cache)
# The iterator pattern doesn't play at all well with promises ("FiberError:
# fiber called across threads" - i.e. the iterators are mutable), so use the
# block pattern instead.
r = Rosarium::Promise.all(lister.each_page.map {|page| do_page page}).value!.flatten

GithubMirror::JsonCache.new("var/fast-run.json", 0).write(r)

# eof fast-run
