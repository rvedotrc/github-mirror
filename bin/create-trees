#!/usr/bin/env ruby
# vi: set ts=2 sw=2 :

# Given bare mirrors, create local "tree" files, listing the default branch tree of each repo.

require 'fileutils'
require 'find'
require 'json'
require 'rosarium'
require 'tempfile'

default_branch_by_id = JSON.parse(IO.read "var/repositories.json").map do |r|
  [ r["id"].to_s, r["default_branch"] ]
end.to_h

BARE_DIR = './var/github'

def repo_empty?(id_dir)
  pid = Process.spawn(
    "git", "show-ref",
    chdir: "#{id_dir}/mirror",
    out: "/dev/null",
  )
  Process.wait(pid)
  $?.exitstatus == 1
end

def read_tree(tree_file)
  lines = File.open(tree_file) do |f|
    f.each_line("\0").map do |l|
      l.chomp!("\0")
      # TODO: symlinks, I bet
      details, path = l.split /\t/, 2
      mode, type, hash, size = details.split ' '
      size = if size != '-' ; size.to_i ; end
      { mode: mode, type: type, hash: hash, size: size, path: path }
    end
  end
end

def make_tree(id_dir, default_branch, tree_file)
  default_branch or raise
  tmp_tree = "#{tree_file}.tmp"

  File.open(tmp_tree, 'w') do |f|
    pid = Process.spawn(
      "git", "ls-tree", "-z", "-r", "-l", "-t", "refs/heads/#{default_branch}",
      chdir: "#{id_dir}/mirror",
      out: f.fileno,
    )
    Process.wait(pid)
    unless $?.success?
      return { id_dir: id_dir, status: :error } unless repo_empty?(id_dir)
    end
  end

  tree = read_tree(tmp_tree)

  json_tree = "#{tree_file}.json"
  json_tree_tmp = json_tree + ".tmp"
  IO.write(json_tree_tmp, JSON.pretty_generate(tree) + "\n")
  File.rename json_tree_tmp, json_tree

  File.rename tmp_tree, tree_file
  { id_dir: id_dir, status: :success }
end

def mtime_of(file)
  begin
    File.stat(file).mtime.to_i
  rescue Errno::ENOENT
    0
  end
end

def ensure_tree_fresh(id_dir, default_branch)
  tree_file = "#{id_dir}/tree"
  pushed_at = "#{id_dir}/pushed_at"

  if mtime_of(tree_file) <= mtime_of(pushed_at)
    make_tree(id_dir, default_branch, tree_file)
  else
    { id_dir: id_dir, status: :fresh }
  end
end

promises = Dir.glob("#{BARE_DIR}/id/*").map do |id_dir|
  id = File.basename id_dir
  Rosarium::Promise.execute do
    ensure_tree_fresh id_dir, default_branch_by_id[id]
  end
end

all = Rosarium::Promise.all(promises).value!

all.each do |r|
  p r if r[:status] == :error
end

# eof
